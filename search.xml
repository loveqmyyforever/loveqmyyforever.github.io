<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用公网IP访问电脑虚拟机搭建的web（二）</title>
      <link href="/2023/01/12/yong-gong-wang-ip-fang-wen-dian-nao-xu-ni-ji-da-jian-de-web-er/"/>
      <url>/2023/01/12/yong-gong-wang-ip-fang-wen-dian-nao-xu-ni-ji-da-jian-de-web-er/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用公网IP访问电脑虚拟机搭建的web（一）</title>
      <link href="/2023/01/12/yong-gong-wang-ip-fang-wen-dian-nao-xu-ni-ji-da-jian-de-web-yi/"/>
      <url>/2023/01/12/yong-gong-wang-ip-fang-wen-dian-nao-xu-ni-ji-da-jian-de-web-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、想法"><a href="#一、想法" class="headerlink" title="一、想法"></a>一、想法</h2><p>大一的时候学习了网页设计制作这门课，于是就想着，我辛辛苦苦做的的网页只能在自己的电脑看，要是有一天自己出门在外，而且电脑刚好没有放在身边，那我怎么看呢？</p><p>直到放假回家，我瞅了一眼家里的路由器。</p><p>嘿嘿，这不就来活了嘛！</p><span id="more"></span><h2 id="二、了解家里上网方式"><a href="#二、了解家里上网方式" class="headerlink" title="二、了解家里上网方式"></a>二、了解家里上网方式</h2><p><img src="/../../images/%E7%94%A8%E5%85%AC%E7%BD%91IP%E8%AE%BF%E9%97%AE%E7%94%B5%E8%84%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BA%E7%9A%84web%EF%BC%88%E4%B8%80%EF%BC%89/%E4%B8%8A%E7%BD%91%E6%96%B9%E5%BC%8F.png"></p><ol><li><p>为了上网，肯定要接根线（<code>光纤</code>）到你家，不然你天天用手机流量也吃不消。</p></li><li><p>但是接上线了还不行，还得让运营商（<code>联通</code>、<code>电信</code>、<code>移动</code>）给你开通网络，网络就通过这根线传到你家的。</p></li><li><p>那么给你开通的网络就是我们常说的<code>宽带</code>，我们要就要使用运营商给我们提供的<code>宽带账号和密码</code>来登录上网，这种上网方式就叫<code>拨号上网</code>。</p><blockquote><p><strong>拨号上网</strong>：说白了就是登录运营商给你的账号密码来上网</p><blockquote><p>这跟打电话一样，为了把电话打出去就要对电话号码进行拨号</p><p>宽带账号跟电话号码都是一个道理</p></blockquote><p>这个账号密码就是宽带的账号密码</p><p>宽带要去运营商买的，不然人家怎么收费和管理？</p><p>PS：<strong>拨号上网</strong>是基于<code>PPPoE协议</code>的,所以也叫做<strong>PPPoE上网</strong></p></blockquote></li><li><p>好了，现在光纤有了，宽带也有了，那我们怎么上网呢？难道把光纤插到我的手机或者电脑上嘛？当然不是。</p></li><li><p>我们每家每户都买了个路由器（<code>AP</code>），通过它来跟外面的网络打交道。而我们的手机、电脑等一些设备则通过无线信号（<code>WiFi</code>）或者网线来连接<code>路由器</code>。</p></li><li><p>那<code>光猫</code>又是怎么一回事呢：</p><blockquote><p>我们常说的“<strong>猫</strong>”，其实叫做<strong>调制解调器</strong>（<code>Modem</code>），作用是进行<strong>信号转换</strong>，因为读音跟“猫”很像，所以我们又叫做“猫”</p></blockquote><p>在以前，人们是通过电话线上网的，所以对电话线进行信号转换的设备，叫“<strong>猫</strong>”。</p><p>到了现在，科技的进步使得我们可以用光纤进行上网，而且速度更快，那么对光纤进行信号转换的设备，叫“<strong>光猫</strong>”。</p></li><li><p>话说回来，正因为每家每户接的线是光纤，传输的是<code>光信号</code>；而我们路由器接收的是<code>数字信号</code>，就没有办法通信，所以就有了<strong>光猫</strong>。</p><p>打个比方：哪一天我们国家主席要是访问俄罗斯，会因为语言不通，身边会带上翻译官。而这个翻译官的作用，是跟光猫的作用一样的。</p><blockquote><p>现在的光猫大多集成了路由器的一些功能，比如WiFi、路由等等，所有它就有两种模式：<code>桥接模式</code>和<code>路由模式</code>。如果舍弃路由器，硬要拿光猫上网也是可以的</p><p><strong>不过作者还是建议您</strong>将它改成<strong>桥接模式</strong>，因为当初发明光猫的作用就是进行信号转换的，仅此而已！</p><p>就像是你出国旅游，随身带了个翻译员，你总不能让他还要给你开车接送，又得拎包推箱，还会端茶递水、捏肩捶腿，甚至远程帮你管理公司事务…</p><p>那自然是开车要司机，吃喝要去餐厅，按摩要去按摩店，辅助公务得要秘书来。翻译就干翻译的事儿，光猫就干光猫的，你让他同时要干其他那么多事儿，他肯定忙不过来对吧。</p></blockquote></li><li><p>这样，我们的设备就可以通过路由器，路由器再通过光猫来上网了！</p></li></ol><h2 id="三、计划"><a href="#三、计划" class="headerlink" title="三、计划"></a>三、计划</h2><p>因为运营商给我们家分配的是公网IP，那么在自己电脑的虚拟机搭建一个网站，把端口映射给主机，然后主机端口映射给路由器，路由器再由光猫桥接到外网。通过这样层层递进的方式，我就可以实现外网通过<strong>IP+端口号</strong>来访问虚拟机的web。</p><h2 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h2><ol><li><p>光猫改成<strong>桥接模式</strong>！</p></li><li><p>怎么着得有个公网IP吧，不然我怎么通过这个IP来访问呢？</p><p>判断自家有没有公网IP：</p><ul><li><p>步骤一：<a href="https://zh-hans.ipshu.com/">https://zh-hans.ipshu.com</a></p><p><strong>记住在搜索框下面显示的IP</strong></p></li><li><p>步骤二：登录192.168.0.1，进入自家路由器的后台，找到<strong>WAN口的IP</strong></p><p><strong>记住WAN口的IP</strong></p></li><li><p>将两个IP地址进行比对：</p><p><strong>相同，恭喜你，有了公网IP非常香</strong></p><p><strong>不相同，不要悲伤，不要心急，可以联系运营商给你分配一个公网IP</strong></p></li></ul></li></ol><p>工欲善其事，必先利其器，相信您对自己家的上网方式有了一定的了解，并且也做好了准备工作，那么</p><p>靓仔，下一篇文章，咱儿走着瞧~~~</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客搭建</title>
      <link href="/2023/01/04/wo-de-bo-ke-da-jian/"/>
      <url>/2023/01/04/wo-de-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h2><h3 id="1-1在自己电脑上创建一个文件夹，用来存放搭建博客所需要的工具和文件"><a href="#1-1在自己电脑上创建一个文件夹，用来存放搭建博客所需要的工具和文件" class="headerlink" title="1.1在自己电脑上创建一个文件夹，用来存放搭建博客所需要的工具和文件"></a>1.1在自己电脑上创建一个文件夹，用来存放搭建博客所需要的工具和文件</h3><ul><li><p>比如我在D盘创建了一个名字叫Blog的文件夹。</p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/blog1.png" style="zoom:;" /></li><li><p>然后进入Blog文件夹，再创建两个文件夹。一个是Tools，用来存放待会搭建博客要用到的工具；另一个是用来存放博客的各种配置文件和作品，名字随便取。我自己就取了一个跟我GitHub仓库一样的名字。</p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/blog2.png"></p></li></ul><span id="more"></span><h3 id="1-2下载搭建博客所需要的工具Git和node-js"><a href="#1-2下载搭建博客所需要的工具Git和node-js" class="headerlink" title="1.2下载搭建博客所需要的工具Git和node.js"></a>1.2下载搭建博客所需要的工具<a href="https://git-scm.com/download">Git</a>和<a href="https://nodejs.org/en/download/">node.js</a></h3><ul><li><p>因为我自己创建了专门存放工具的文件夹，所以我放在Tools里面</p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/tool.png"></p></li></ul><h3 id="1-3把Node-js和Git加入系统环境变量中"><a href="#1-3把Node-js和Git加入系统环境变量中" class="headerlink" title="1.3把Node.js和Git加入系统环境变量中"></a>1.3把Node.js和Git加入系统环境变量中</h3><ul><li><p>在命令提示符中输入SystemPropertiesAdvanced.exe打开系统属性，打开环境变量。</p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE.png" alt="" style="zoom: 67%;" /></li><li><p>先选中Path，再点击编辑。</p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="" style="zoom:67%;" /></li><li><p>新建一个变量，然后把Git和Node.js环境加进去。</p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E7%BC%96%E8%BE%91%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="" style="zoom:67%;" /></li><li><p>完成之后，我们打开命令提示符（win+r），分别输入：</p><pre class="line-numbers language-none"><code class="language-none">node -vgit --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>如果下面有版本号跳出来，恭喜你环境变量添加成功！</strong></p></li></ul><h2 id="二、注册GitHub账号，并进行Git配置"><a href="#二、注册GitHub账号，并进行Git配置" class="headerlink" title="二、注册GitHub账号，并进行Git配置"></a>二、注册GitHub账号，并进行Git配置</h2><h3 id="2-1注册账号不用我说了吧，都这么大的人了"><a href="#2-1注册账号不用我说了吧，都这么大的人了" class="headerlink" title="2.1注册账号不用我说了吧，都这么大的人了~"></a>2.1注册账号不用我说了吧，都这么大的人了~</h3><h3 id="2-2配置Git-用户名和邮箱"><a href="#2-2配置Git-用户名和邮箱" class="headerlink" title="2.2配置Git 用户名和邮箱"></a>2.2配置Git 用户名和邮箱</h3><ul><li><p>在桌面点击鼠标右键，点击 Git Bash Here，然后分别输入下面的两个命令，并回车：</p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%97%A0%E6%A0%87%E9%A2%98.png"></p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;此处填写你注册时的用户名&quot;git config --global user.email &quot;此处填写你注册时的邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>然后在<code>C:/Users/[username</code>找到<code>.gitconfig</code>文件<strong>（未找到的话，请开启显示隐藏文件的功能）</strong>，打开后可以看到一下内容：</p><pre class="line-numbers language-none"><code class="language-none">[user]name &#x3D; xxxemail &#x3D; xxx@xxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-3配置GitHub"><a href="#2-3配置GitHub" class="headerlink" title="2.3配置GitHub"></a>2.3配置GitHub</h3><ul><li><p>新建一个名为你的用户名.github.io的仓库</p><p>比如说，如果你的github用户名是<code>test</code>，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <code>http://test.github.io</code>了.</p></li><li><p>具体操作如图：</p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20201109215618150.png"></p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20201109215908851-167283383440317.png"></p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20201110094937609.png"></p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20201110095650122.png"></p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20201110100254734.png"></p></li></ul><h3 id="2-4配置SSH-免密登录"><a href="#2-4配置SSH-免密登录" class="headerlink" title="2.4配置SSH 免密登录"></a>2.4配置SSH 免密登录</h3><ul><li><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><p><strong>简单的来说就是给予你当前电脑访问你GitHub 仓库的权限</strong></p></li><li><p>回到桌面，右键桌面的<code>git bash here</code>，创建一个ssh密钥</p><pre class="line-numbers language-none"><code class="language-none">cd ~&#x2F;.sshssh-keygen -t rsa -C &quot;你自己的邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后enter三连</p><p>它会在<code>C:\Users\用户名\.ssh</code>生成下面两个文件<strong>（要勾选显示“隐藏的项目”）</strong>：</p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.png"></p><p>而我们要的是下面的<code>id_rsa.pub</code>文件，<strong>这里面有我们的公开的ssh码，也是给管理员这个ssh，让它来添加</strong></p></li><li><p>登陆 <strong>GitHub <strong>，进入 <strong>Settings</strong> 页面，选择左边栏的</strong>SSH and GPG keys</strong>，点击 <strong>New SSH key</strong>。</p><p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/v2-9125065afd24332d7cd84feb6a350730_r.jpg"></p><p><strong>OK，咱们搭建博客的环境搞好了，接下来可以搭建博客框架，然后写文章进行推送啦！</strong></p></li></ul><h2 id="三、本地安装-Hexo-博客框架并推送到-GitHub"><a href="#三、本地安装-Hexo-博客框架并推送到-GitHub" class="headerlink" title="三、本地安装 Hexo 博客框架并推送到 GitHub"></a>三、本地安装 Hexo 博客框架并推送到 GitHub</h2><h3 id="3-1-博客初始化"><a href="#3-1-博客初始化" class="headerlink" title="3.1 博客初始化"></a>3.1 博客初始化</h3><ul><li><p>在命令行安装cnpm</p><pre class="line-numbers language-none"><code class="language-none">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装后验证：<code>cnpm -v</code> 出现版本号说明安装成功</p></li><li><p>命令行安装hexo （安装博客框架）</p><pre class="line-numbers language-none"><code class="language-none">cnpm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装后验证：<code>hexo -v</code> 出现版本号说明安装成功</p></li><li><p>接着进入存放博客的文件夹中<strong>（我的文件夹取名叫loveqmyyforever.github.io，所以我就进入我这个文件夹）</strong>，右键打开<strong>Git bash here</strong>,并依次执行以下命令:</p><pre class="line-numbers language-none"><code class="language-none">hexo init #初始化命令，hexo会自动下载一些文件到这个目录，包括node_modules等hexo g #生成命令hexo s #启动服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，说明博客初始化以及成功！</p><p>很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，</p><p>因为4000这个端口太常见了， 只需要关闭4000端口或者重新选择端口即可</p><p><strong>到此博客的初始化便完成了，此时你可以本地开启服务并访问，下一步便是推送到GitHub 上！</strong></p></li></ul><h3 id="3-2-将博客部署到-github-个人主页上"><a href="#3-2-将博客部署到-github-个人主页上" class="headerlink" title="3.2 将博客部署到 github 个人主页上"></a>3.2 将博客部署到 github 个人主页上</h3><ul><li><p>在<strong>loveqmyyforever.github.io</strong>文件夹就中安装<code>hexo-deployer-git</code> 插件，同样的，右击<strong>Git bash here</strong>。</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save #必须安装，否则执行hexo d 的话会报错<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装好之后，就可以看到有一个叫做<code> _config.yml</code>的文件，打开它，拉到底，在文件末尾修改配置信息：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: github上对应仓库的ssh链接 或 github上对应仓库的ssh链接    branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 <code>:</code> 后面一定要有空格！！！</strong></p></li><li><p>最后，在<strong>loveqmyyforever.github.io</strong>文件夹下将本地blog推送到 github仓库</p><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推送成功后, 在浏览器中输入对应域名, 即可访问 <code>https://你的账户名字.github.io/</code></p><p>现在，我们已经把博客搭建好了！</p><p>嗷，对了，还有一些hexo框架常用的命令：</p><table><thead><tr><th>命令</th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>hexo clean</code></td><td>清除本地项目缓存</td></tr><tr><td><code>hexo g</code></td><td>重新生成</td></tr><tr><td><code>Hexo d</code></td><td>推送到github</td></tr><tr><td><code>Hexo s</code></td><td>开启本地预览</td></tr></tbody></table><p>当然，命令也可以连起来用，就像这样：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>。</p></li></ul><h2 id="四、如何解析自己的域名到博客主页"><a href="#四、如何解析自己的域名到博客主页" class="headerlink" title="四、如何解析自己的域名到博客主页"></a>四、如何解析自己的域名到博客主页</h2><h3 id="4-1注册域名"><a href="#4-1注册域名" class="headerlink" title="4.1注册域名"></a>4.1注册域名</h3><p><a href="https://cloud.tencent.com/act/pro/domain-sales?fromSource=gwzcw.2043811.2043811.2043811&utm_id=gwzcw.2043811.2043811.2043811&utm_medium=cpc">腾讯云看这里</a></p><p><a href="https://wanwang.aliyun.com/?utm_content=se_1003106260">阿里云看这里</a></p><h3 id="4-2将自己的域名解析到github-page"><a href="#4-2将自己的域名解析到github-page" class="headerlink" title="4.2将自己的域名解析到github page"></a>4.2将自己的域名解析到github page</h3><ul><li><p>添加这两个记录</p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/P4(V%25DEWIVXO$F$734)GO$V.png"></p></li><li><p>在GitHub仓库中，将自己的域名写进去</p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/QQ%E5%9B%BE%E7%89%8720230104224524.png"></p><p>这样子，我们的域名就能成功和自己的博客绑定一起了。</p><p>但是吧，我发现我每次把文章推送上去后，GitHub仓库里的域名又给我清空了，可恶！</p><p>解决办法：</p><ul><li><p>找到站点配置文件的<code>source</code>文件夹，点进去。</p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/QQ%E5%9B%BE%E7%89%8720230104225139.png"></p></li><li><p>新建一个<strong>文本文档</strong>，在里面输入<strong>自己注册的域名。</strong></p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/rwr.png"></p></li><li><p>保存的名字是<code>CNAME</code>，不要后缀名！</p><p><img src="/images/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/fgdf.png"></p></li></ul></li></ul><p><strong>这样，我们就可以通过自己的域名来访问自己的博客了!</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
